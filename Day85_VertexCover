from typing import List


class Solution:
    def vertexCover(self, n : int, edges : List[List[int]]) -> int:
        # code here
        graph = {i+1: set() for i in range(n)}
        for x, y in edges:
            graph[x].add(y)
            graph[y].add(x)
        
        order = sorted([i+1 for i in range(n)], key=lambda x: len(graph[x]))
        
        res = 1e+7
        for node in order:
            cur = set()
            cur.update(graph[node])
            
            for neigh in order:
                if neigh in cur:
                    continue
                cur.update(graph[neigh])
            
            res = min(res, len(cur))
        
        return res



#{ 
 # Driver Code Starts
class IntMatrix:
    def __init__(self) -> None:
        pass
    def Input(self,n,m):
        matrix=[]
        #matrix input
        for _ in range(n):
            matrix.append([int(i) for i in input().strip().split()])
        return matrix
    def Print(self,arr):
        for i in arr:
            for j in i:
                print(j,end=" ")
            print()


if __name__=="__main__":
    t = int(input())
    for _ in range(t):
        
        n = int(input())
        
        
        m = int(input())
        
        
        edges=IntMatrix().Input(m, m)
        
        obj = Solution()
        res = obj.vertexCover(n, edges)
        
        print(res)
        

# } Driver Code Ends
