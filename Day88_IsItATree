#User function Template for python3
from collections import defaultdict
class Solution:
    def isTree(self, n, m, edges):
        # Code here
        def dfs(node, visited, parent):
            visited[node] = True
            for neighbor in graph[node]:
                if not visited[neighbor]:
                    if dfs(neighbor, visited, node):
                        return True
                elif neighbor != parent:
                    return True
            return False
        graph = defaultdict(list)
        for edge in edges:
            u, v = edge
            graph[u].append(v)
            graph[v].append(u)
        visited = [False] * n
        if dfs(0, visited, -1):
            return 0 
        for node in range(n):
            if not visited[node]:
                return 0  
        return 1


#{ 
 # Driver Code Starts
#Initial Template for Python 3

for _ in range (int(input())):
    n,m = [int(i) for i in input().split()]
    edges = []
    for i in range(m):
        a,b = map(int,input().split())
        edges.append([a,b])

    ob = Solution()
    print(ob.isTree(n,m,edges))
# } Driver Code Ends
